<!--
including header content which is common for all pages
-->
<%- include layouts/header-gen.ejs %>

    <div ng-app="myApp" ng-controller="myCtrl">
        <!--This is a test div for displaying stuff.    -->
        <div id="result" style="display: none;"></div>



        <!-- select a subject-->
        <div ng-show="subject_show" style="float:left;padding-right:40px">
            <p>Select Subject</p>

            <form action="/marker/getAssessmentList" method="POST">

                <select id="M_subSelect" name="M_subject_name" ng-model="M_Subject" onChange="record_selection(M_subSelect,'M_idxSubSelected');" ng-options="Subject for Subject in SubjectList">
                    <option id="subjectSelectMessage" value="" >No list.</option>

                </select>

                <span><input type="submit"></span>
            </form>
        </div>


        <!-- select an assessment-->
        <div ng-show="assessment" style="float:left;padding-right:40px">
            <p>Select Assessment</p>
            <form action="/marker/getStudentList" method="POST">

                <select id="M_assSelect" name="M_assessment_name" ng-model="M_assesssment" onChange="record_selection(M_assSelect,'M_idxAssSelected')" ng-options="Assessment for Assessment in AssessmentList">
                    <option id="assessmentSelectMessage" value="" >Choose</option>
                </select>
                <span><input type="submit"></span>
            </form>
        </div>


        <!-- select an student-->
        <div ng-show="student" style="float:left;padding-right:40px">
            <p>Select Student</p>
            <form action="/marker/getStudentMarks" method="POST">


                <select id="M_studSelect" name="M_student_number" ng-model="M_student" onChange="record_selection(M_studSelect,'M_idxStudSelected')" ng-options="Student for Student in StudentList">
                    <option id="studentSelectMessage" value="" selected="selected">Choose</option>
                </select>
                <span><input type="submit"></span>
            </form>
        </div>


        <!--         add in a form submission button-->
        <div ng-show="student" style="float:left;padding-right:40px">
            <p>Submit Marks</p>
            <form action="/marker/submitMarks" method="POST" id="marksSubmitForm">

                <span><input type="submit"></span>
            </form>

        </div>

<!--
                 add a hide/show Custom Comments button
        <div ng-show="student" style="float:left;padding-right:40px">

            <span><input type="buttton">Custom Comments</span>


        </div>
-->



        <!--###################################################################-->
        <div id="window" style="position:absolute; z-index:10; left:350px; top:160px; width:400px;background-color:#dde3eb; border:1px solid #464f5a; display:none;">


            <div style="padding-bottom:8px; width:400px; background-color:#718191; border-bottom:1px solid #464f5a;" onMouseDown="beginDrag(this.parentNode, event);">

                <div style="position:absolute; top:2px; left:5px; font-size:16px; font-weight:bold; color:#FFFFFF;">Drag me!</div>

                <div style="position:absolute; top:3px; left:377px; float:right;" onClick="this.parentNode.parentNode.style.display = 'none';">

                    <!--                    <img src="How can I create a floating window on my html page.files/close_btn.gif" border="0" />-->

                </div>

            </div>
            <br/>
            <div style="margin-left:20px;">your content here...</div>

            <div style="margin-left:30px;">your content here...</div>

            <div style="margin-left:40px;">your content here...</div>
            <br/>

        </div>


        <!--Read more: https://www.webdesign.org/web-programming/javascript/creating-a-floating-window.10895.html#ixzz51tIW9Lcp-->

        <!--###################################################################-->





        <!-- the marking form-->
        <div id="my_marking_form" style="display:none">
            <style>
                table,
                th,
                td {
                    border: 1px solid black;
                    border-collapse: collapse;
                }

                th,
                td {
                    padding: 5px;
                }

            </style>
            <table width="100%" style="margin: 0px">

                <tr>
                    <td>
                        <p>This is the header</p>
                        <p>with information about the student and the assessment being marked</p>
                    </td>

                </tr>
                <tr>
                    <table width="100%" style="margin: 0px">

                        <td style="background-color:black; vertical-align:top">
                            <div id="M_nav" style="background-color:transparent" height="100%">
                                <p style="color:white" position="absolute" top="5px" right="5px">
                                    &#x250F Course Code here.
                                </p><br>
                                <p> second line</p>
                                <!--                                <button type="button" onclick="scroll_marking_area('QP1_3_2_0_mark')">Click Me!</button>-->
                            </div>
                        </td>
                        <td>
                            <div style="overflow-y: scroll; height:400px;">

                                <table id="marking_area">
                                </table>
                            </div>

                        </td>
                        <!--
                        <table width="100%">

                            <tr>

                                <td style="margin: 0px; vertical-align:top">
                                    <div>
                                                                        <div id="M_nav">

                                        This is the navigation area
                                        <button type="button" onclick="scoll_marking_area('QP1_3_2_0_mark')">Click Me!</button>

                                    </div>
                                </td>
                                <td>
                                    <div overflow-y="auto" style="height:150px">

                                        <table id="marking_area">
                                            This is the actual marking form area.
                                        </table>
                                    </div>

                                </td>
                            </tr>
                        </table>
-->
                </tr>
                </table>

        </div>
    </div>





    <script>
        var app = angular.module('myApp', []);
        app.controller('myCtrl', function($scope) {


            var stage = <%- Stage %>;
            var sentSubList = <%- SubjectList %>;
            var sentAssList = <%- AssessmentList %>;
            var sentStudList = <%- StudentList %>;
            var sentMarkingForm = <%- MarkingForm %>;
            var sentMarks = <%- Marks %>;
            var sentComments = <%- Comments %>;
            var sentResponses = <%- Responses %>;
            var Parts_marking_config_data = [];




            switch (stage) {
                case (1):
                    // check if we have been given a new subject list.
                    if (sentSubList === 0) {
                        // use existing subject list
                        $scope.SubjectList = JSON.parse(sessionStorage.getItem("subjectList"));
                    } else {

                        // use the new list sent from the server and store it locally for future use.
                        sessionStorage.subjectList = JSON.stringify(sentSubList);
                        $scope.SubjectList = JSON.parse(sessionStorage.getItem("subjectList")).map(function(el) {
                            return el.SubjectID;
                        });
                    }

                    // Check to see if there are any items to choose from in the list and adjust the message in the select box accordingly.
                    if (Object.keys(sentSubList).length < 1) {
                        document.getElementById("subjectSelectMessage").text = "No Subjects";
                    } else {
                        document.getElementById("subjectSelectMessage").text = "Choose";
                    }


                    // turn on the appropriate parts of the form
                    $scope.subject_show = true;
                    $scope.assessment = false;
                    $scope.student = false;
                    $scope.marking_form = false;
                    break;

                case (2):
                    // set up the subject display

                    $scope.SubjectList = JSON.parse(sessionStorage.getItem("subjectList")).map(function(el) {
                        return el.SubjectID;
                    });
                    $scope.M_Subject = $scope.SubjectList[sessionStorage.getItem("M_idxSubSelected")];

                    // save the sent list of assignments.
                    sessionStorage.assessmentList = JSON.stringify(sentAssList);

                    // populate the dropdown list and set the default value
                    $scope.AssessmentList = JSON.parse(sessionStorage.getItem("assessmentList")).map(function(el) {
                        return el.ModuleID;
                    });

                    // Check to see if there are any items to choose from in the list and adjust the message in the select box accordingly.
                    if (Object.keys(sentAssList).length < 1) {
                        document.getElementById("assessmentSelectMessage").text = "No Assessments";
                    } else {
                        document.getElementById("assessmentSelectMessage").text = "Choose";
                    }


                    var sub_selector = document.getElementById("M_subSelect");
                    var t1 = sub_selector.selectedIndex;
                    sub_selector.selectedIndex = 3;
                    //sessionStorage.getItem("M_subSelect");


                    // set up what should be seen
                    $scope.subject_show = true;
                    $scope.assessment = true;
                    $scope.student = false;
                    $scope.marking_form = false;


                    break;

                case (3):
                    // set up the subject display
                    {
                        $scope.SubjectList = JSON.parse(sessionStorage.getItem("subjectList")).map(function(el) {
                            return el.SubjectID;
                        });
                        $scope.M_Subject = $scope.SubjectList[sessionStorage.getItem("M_idxSubSelected")];

                        // set up the assignment display
                        $scope.AssessmentList = JSON.parse(sessionStorage.getItem("assessmentList")).map(function(el) {
                            return el.ModuleID;
                        });

                        $scope.M_assesssment = $scope.AssessmentList[sessionStorage.getItem("M_idxAssSelected")];



                        // now save the student list and display set up 
                        sessionStorage.studentList = JSON.stringify(sentStudList);
                        sessionStorage.markingForm = JSON.stringify(sentMarkingForm);

                        //load data into scope vars
                        $scope.StudentList = JSON.parse(sessionStorage.getItem("studentList")).map(function(el) {
                            return el.StudentID;
                        });
                        $scope.MarkingForm = JSON.parse(sessionStorage.getItem("markingForm"));


                        // Check to see if there are any items to choose from in the list and adjust the message in the select box accordingly.
                        if (Object.keys(sentStudList).length < 1) {
                            document.getElementById("studentSelectMessage").text = "No Students";
                        } else {
                            document.getElementById("studentSelectMessage").text = "Choose";
                        }


                        //                    document.getElementById("result").innerHTML = $scope.MarkingForm[0].ModuleID;
                        //                    debugger;

                        $scope.subject_show = true;
                        $scope.assessment = true;
                        $scope.student = true;
                        $scope.marking_form = false;



                        //                    document.getElementById("result").innerHTML =Object.keys(sentMarkingForm[0]) ;
                        break;
                    }


                case (4):
                    // set up the subject display
                    {
                        $scope.SubjectList = JSON.parse(sessionStorage.getItem("subjectList")).map(function(el) {
                            return el.SubjectID;
                        });
                        $scope.M_Subject = $scope.SubjectList[sessionStorage.getItem("M_idxSubSelected")];

                        // set up the assignment display
                        $scope.AssessmentList = JSON.parse(sessionStorage.getItem("assessmentList")).map(function(el) {
                            return el.ModuleID;
                        });
                        $scope.M_assesssment = $scope.AssessmentList[sessionStorage.getItem("M_idxAssSelected")];

                        //Set up Student display
                        $scope.StudentList = JSON.parse(sessionStorage.getItem("studentList")).map(function(el) {
                            return el.StudentID;
                        });
                        $scope.M_student = $scope.StudentList[sessionStorage.getItem("M_idxStudSelected")];

                        // save the marking form to local storage
                        $scope.MarkingForm = JSON.parse(sessionStorage.getItem("markingForm"));

                        // save marks and marker comments to local storage
                        sessionStorage.marks = JSON.stringify(sentMarks);
                        sessionStorage.comments = JSON.stringify(sentComments);
                        sessionStorage.responses = JSON.stringify(sentResponses);

                        // save the marks to local storage
                        $scope.Marks = JSON.parse(sessionStorage.getItem("marks"));

                        turn_on_marking_form();

                        $scope.subject_show = true;
                        $scope.assessment = true;
                        $scope.student = true;
                        $scope.marking_form = true;

                        break;
                    }
                    case (5):
                    {alert("Marks saved.");}

            }

        })

        //This function saves a selectors index value for use in the next screen
        function record_selection(e_id, index_storage_name) {

            sessionStorage.setItem(index_storage_name, (e_id.selectedIndex - 1));
        }


        //        this function turns on the marking form.
        function turn_on_marking_form() {

            //set up the marking area ready for to take div that build up the marking form.
            var last_part_displayed = "";
            document.getElementById('my_marking_form').style.display = 'block';
            var form_config = JSON.parse(sessionStorage.getItem("markingForm"));


            // now add all the marking content
            for (var i = 0, len = form_config.length; i < len; i++) {
                document.getElementById("result").innerHTML = form_config[i].PartNumber;

                // test to see what is in this row (question, part, comment, etc)
                if (form_config[i].PartNumber == 0) {
                    // this is a question row. put it in the display
                    display_a_question(form_config[i]);
                } else if (form_config[i].CommentNumber == 0) {
                    // this is a part row. put it in the display
                    display_a_part(form_config[i]);
                } else if (form_config[i].CommentNumber == 99) {
                    // this is a response row. put it in the display
                    display_a_response(form_config[i]);
                } else {
                    // this is a comment row. put it in the display
                    display_a_comment(form_config[i]);
                }
            }
            Nav_init();
            nav_update_colors(0);

        }


        function test_alert() {
            alert('test1');
        }

        // takes data for a questions and builds it in the form
        function display_a_question(question_data) {

            if (question_data.QuestionNumber > 1) {
                add_H_bar();
            }

            // first create a row then add data to it
            // first the question number.
            var row_part = document.createElement("tr");
            var Qno_row_part = document.createElement("td");
            var Qno_row_text = document.createTextNode("Q" + question_data.QuestionNumber);
            Qno_row_part.appendChild(Qno_row_text);
            Qno_row_part.setAttribute("width", "40");
            row_part.appendChild(Qno_row_part);


            //put in question.
            var Q_row_part = document.createElement("td");
            Q_row_part.setAttribute("colSpan", "2");
            var Q_row_text = document.createElement("div");
            Q_row_text.style = "float:left;padding-left:10px";
            Q_row_text.innerHTML = question_data.field1;
            row_part.appendChild(Q_row_text);


            // add question row to doc
            var element = document.getElementById("marking_area");
            element.appendChild(row_part);
            add_H_bar();
        }

        function display_a_part(part_data) {
            // takes a data for a part and builds it in the form

            var row_part = document.createElement("tr");

            // add the part number
            var Pno_col = document.createElement("td");
            var Pno_col_text = document.createTextNode("Q" + part_data.QuestionNumber + " P" + part_data.PartNumber);
            Pno_col.appendChild(Pno_col_text);
            row_part.appendChild(Pno_col);

            //put mark box in the next column of the row.
            var P_col_Q = document.createElement("td");
            // add the marking box
            var P_col_mark_div = document.createElement("div");
            P_col_mark_div.style = "float:left;padding-right:10px";
            var P_col_mark_tb = document.createElement("input");
            P_col_mark_tb.type = "number";
            P_col_mark_tb.step = "0.25";
            P_col_mark_tb.style.width = 100;
            P_col_mark_tb.style.padding = 3;
            P_col_mark_tb.style.color = "light green";
            var Part_ID = "QP" + part_data.SectionNumber + "_" + part_data.QuestionNumber + "_" + part_data.PartNumber + "_0";
            var Part_config_record = JSON.parse(sessionStorage.getItem("marks")).find(x => x.id == Part_ID);
            if (Part_config_record != undefined) {
                P_col_mark_tb.value = parseFloat(Part_config_record.Marks);
            }
            P_col_mark_tb.onchange = function() {
                check_limits(this)
            };

            P_col_mark_tb.id = Part_ID + "_mark";
            P_col_mark_tb.name = Part_ID;
            P_col_mark_div.appendChild(P_col_mark_tb);
            P_col_Q.appendChild(P_col_mark_div);

            //put in question.  
            var P_col_Q_text_div = document.createElement("div");
            P_col_Q_text_div.style = "float:left;padding-right:10px";
            P_col_Q_text_div.innerHTML = part_data.field1;
            P_col_Q.appendChild(P_col_Q_text_div);
            row_part.appendChild(P_col_Q);


            // add part row to doc
            var element = document.getElementById("marking_area");
            element.appendChild(row_part);

        }

        // takes a data for a part and builds it in the form        
        function display_a_comment(comment_data) {

            var row_part = document.createElement("tr");

            // space 
            var Cno_row_part = document.createElement("td");
            var Cno_row_text = document.createElement("div");
            Cno_row_text.style.padding = 3;
            Cno_row_part.appendChild(Cno_row_text);
            row_part.appendChild(Cno_row_part);

            // add a check box.
            var C_col_comment = document.createElement("td");
            var C_col_check_button_div = document.createElement("div");
            C_col_check_button_div.style = "float:left;padding-right:10px";
            var C_col_check_box_btn = document.createElement("input");
            C_col_check_box_btn.type = "checkbox";
            C_col_check_box_btn.style = "height:20px;width:20px";
            var Comment_ID = "QP" + comment_data.SectionNumber + "_" + comment_data.QuestionNumber + "_" + comment_data.PartNumber + "_" + comment_data.CommentNumber;
            C_col_check_box_btn.id = Comment_ID + "_comment_check_box";
            C_col_check_box_btn.name = Comment_ID;
            C_col_check_box_btn.setAttribute("form", "marksSubmitForm");


            // set the checkbox to the right state, as read from data.
            var comments_data = JSON.parse(sessionStorage.getItem("comments"))
            var is_ticked = comments_data.find(x => x.id == Comment_ID);
            if (is_ticked) {
                C_col_check_box_btn.checked = true;
                C_col_check_box_btn.value = 1;
            } else {
                C_col_check_box_btn.value = 0;
            }
            C_col_check_box_btn.onchange = function() {
                Comment_button_clicked(this)
            };


            C_col_check_button_div.appendChild(C_col_check_box_btn);
            C_col_comment.appendChild(C_col_check_button_div);

            //put in comment text.          
            var C_col_text = document.createElement("div");
            C_col_text.style = "float:left";
            C_col_text.innerHTML = comment_data.field1;
            C_col_comment.appendChild(C_col_text);
            row_part.appendChild(C_col_comment);



            // add a line to the display
            var element = document.getElementById("marking_area");
            element.appendChild(row_part);
        }

        // takes a data for this response and builds it in the form
        function display_a_response(response_data) {
            var row_part = document.createElement("tr");
            // space 
            var Rno_row_part = document.createElement("td");
            var Rno_row_div = document.createElement("div");
            Rno_row_div.style.padding = 3;
            Rno_row_part.appendChild(Rno_row_div);
            row_part.appendChild(Rno_row_part);

            // add a textbox.
            var Resp_col_resp = document.createElement("td");
            var Resp_col_div = document.createElement("div");
            Resp_col_div.style = "padding-right:10px";
            Resp_col_div.innerHTML = "Marker’s remarks (optional):<br>";
            var Resp_col_tb = document.createElement("textarea");
            Resp_col_tb.rows = "5";
            Resp_col_tb.cols = "60";
            // fill in the attributes
            var Resp_ID = "QP" + response_data.SectionNumber + "_" + response_data.QuestionNumber + "_" + response_data.PartNumber + "_" + response_data.CommentNumber;
            var has_Response = JSON.parse(sessionStorage.getItem("responses")).find(x => x.id == Resp_ID);
            if (has_Response) {
                Resp_col_tb.value = has_Response.response;
            }
            Resp_col_tb.id = Resp_ID + "_response_textbox";
            Resp_col_tb.name = Resp_ID;
            Resp_col_tb.onchange = function() {
                this.setAttribute("form", "marksSubmitForm");
                var id_parts = Resp_ID.split("_");
                nav_update_colors(id_parts[1]);
            };
            Resp_col_tb.form = "marks1";
            Resp_col_div.appendChild(Resp_col_tb);
            row_part.appendChild(Resp_col_div);

            // add this row to the display
            var element = document.getElementById("marking_area");
            element.appendChild(row_part);
        }

        // adds a bar to the display
        function add_H_bar() {
            var row_part = document.createElement("tr");
            var bar_row_part = document.createElement("td");
            bar_row_part.setAttribute("colSpan", "3");
            var bar_row_bar = document.createElement("hr");
            bar_row_bar.setAttribute("size", "5");
            bar_row_part.setAttribute("class", "marking_hr_bar");
            bar_row_part.appendChild(bar_row_bar);
            row_part.appendChild(bar_row_part);

            var element = document.getElementById("marking_area");
            element.appendChild(row_part);
        }


        // responds to a change of a Comment checkbox
        // by adjustimg the Part mark by the weighting
        // of the comment.
        function Comment_button_clicked(calling_control) {

            // adjust the value according to the state of the checkbox
            if (calling_control.checked) {
                calling_control.value = "1";
            } else {
                calling_control.value = "0";
            }

            // first get the Part ID for this element.
            var part_ID = getThePartID(calling_control);

            var this_Comment_config = JSON.parse(sessionStorage.getItem("markingForm")).find(x => x.id == getThisID(calling_control));
            var comment_value = parseFloat(this_Comment_config.field2);


            var assocciated_Mark_element = document.getElementById(part_ID + "_mark");
            var part_value = parseFloat(assocciated_Mark_element.value);
            var intermediate_result = 0.0;

            // get the current mark value of the Part
            // and update it based on whether the checkbox was
            // check or un-checked.
            if (calling_control.checked) { // checked or unchecked
                intermediate_result = part_value + comment_value;
            } else {
                intermediate_result = part_value - comment_value;
            }
            // write back the new value. Limit checking is done by the Part itself
            assocciated_Mark_element.value = intermediate_result.toString();

            check_limits(assocciated_Mark_element);
        }

        // takes the calling element and returns the ID
        // of the assocciated part.
        // splits open the calling ID and replaces 
        // the comment number with a zero.        
        function getThePartID(calling_control) {

            var calling_ID = calling_control.id;
            var split_ID = calling_ID.split("_");
            var part_ID = split_ID[0].concat("_",
                split_ID[1], "_",
                split_ID[2], "_",
                "0");
            return part_ID;
        }


        // takes the calling element and returns its ID
        // splits open the calling ID and cut off the ending        
        function getThisID(calling_control) {

            var calling_ID = calling_control.id;
            var split_ID = calling_ID.split("_");
            var part_ID = split_ID[0].concat("_",
                split_ID[1], "_",
                split_ID[2], "_",
                split_ID[3]);
            return part_ID;
        }

        // extract Part-config record
        // get max mark from that
        // compare and adjust as required
        function check_limits(calling_Part) {

            if (typeof check_limits.Parts_data == 'undefined') {
                var local_marking_form_configs = JSON.parse(sessionStorage.getItem("markingForm"));
                check_limits.Parts_data = local_marking_form_configs.filter(function(el) {
                    return el.PartNumber >= 1 &&
                        el.CommentNumber == 0;
                });
            }


            // set the form so its included in the POST.
            calling_Part.setAttribute("form", "marksSubmitForm");

            // get the upper mark limit for this part and the current value
            var Part_ID = getThePartID(calling_Part);
            var Part_config_record = check_limits.Parts_data.find(x => x.id == Part_ID);
            var upper_mark_limit = parseFloat(Part_config_record.field2);
            var current_mark = parseFloat(calling_Part.value);


            // test and adjust as required. 
            if (current_mark > upper_mark_limit) {
                calling_Part.value = upper_mark_limit.toString();
            } else if (current_mark < 0) {
                calling_Part.value = "0";
            }

            // update the colours in the nav area.
            var split_ID = calling_Part.id.split("_");
            nav_update_colors(split_ID[1]);
        }

        function beginDrag(elementToDrag, event) {
            var deltaX = event.clientX - parseInt(elementToDrag.style.left);
            var deltaY = event.clientY - parseInt(elementToDrag.style.top);
            if (document.addEventListener) {
                document.addEventListener("mousemove", moveHandler, true);
                document.addEventListener("mouseup", upHandler, true);
            } else if (document.attachEvent) {
                document.attachEvent("onmousemove", moveHandler);
                document.attachEvent("onmouseup", upHandler);
            } else {
                var oldmovehandler = document.onmousemove;
                var olduphandler = document.onmouseup;
                document.onmousemove = moveHandler;
                document.onmouseup = upHandler;
            }
            if (event.stopPropagation) event.stopPropagation();
            else event.cancelBubble = true;
            if (event.preventDefault) event.preventDefault();
            else event.returnValue = false;

            function moveHandler(e) {
                if (!e) e = window.event;
                elementToDrag.style.left = (e.clientX - deltaX) + "px";
                elementToDrag.style.top = (e.clientY - deltaY) + "px";
                if (e.stopPropagation) e.stopPropagation();
                else e.cancelBubble = true;
            }

            function upHandler(e) {
                if (!e) e = window.event;
                if (document.removeEventListener) {
                    document.removeEventListener("mouseup", upHandler, true);
                    document.removeEventListener("mousemove", moveHandler, true);
                } else if (document.detachEvent) {
                    document.detachEvent("onmouseup", upHandler);
                    document.detachEvent("onmousemove", moveHandler);
                } else {
                    document.onmouseup = olduphandler;
                    document.onmousemove = oldmovehandler;
                }
                if (e.stopPropagation) e.stopPropagation();
                else e.cancelBubble = true;
            }



        }

        function Nav_init() {
            // now add all the marking content


            // collect the list of marking elements fro local storage
            var form_config = JSON.parse(sessionStorage.getItem("markingForm"));



            // go through the form and add the Qs and Ps to the nav area
            for (var i = 0; i < form_config.length; i++) {
                // test to see what is in this row (question, part, comment, etc)
                if (form_config[i].PartNumber == 0) {
                    // this is a question row. put it in the display
                    nav_add_Q(form_config[i].QuestionNumber)
                } else if (form_config[i].CommentNumber == 0) {
                    // this is a part row. put it in the display
                    nav_add_P(form_config[i].QuestionNumber, form_config[i].PartNumber, );

                } else if (form_config[i].CommentNumber == 99) {
                    // this is a response row. put it in the display
                    // do nothing for now
                } else {
                    // this is a comment row. put it in the display
                    // do nothing for now
                }
            }

            //call an update function here
        }

        // takes data for a questions and builds it in the form
        function nav_add_Q(Q_no) {

            // adds an entry for a question into the first level of the nav area.

            // find the nav area.
            var nav_area = document.getElementById("M_nav");

            //create the entry and set its parameters
            var m1 = document.createElement("div");
            m1.className = 'dropdown';
            m1.id = "nav_Q" + Q_no + "_P0";

            // create the text and add.
            var textSpan = document.createElement('span');
            textSpan.innerHTML = "Q" + Q_no + " ";
            m1.appendChild(textSpan);

            // create a div space for the Part entries for this question.
            var drop_down_div = document.createElement("div");
            drop_down_div.className = 'dropdown-content';
            drop_down_div.id = "nav_Q" + Q_no + "_Ps";
            m1.appendChild(drop_down_div);

            // add the the nav area
            nav_area.appendChild(m1);
        }


        function nav_add_P(Q_no, P_no) {
            //Adds an entry for a part into a dropdown in the nav area

            //get the right Question sub-menu
            var nav_Q_Parts = document.getElementById("nav_Q" + Q_no + "_Ps");

            // create the entry
            var drop_down_text = document.createElement("P");
            drop_down_text.class = "dropdown";
            drop_down_text.innerHTML = "Q" + Q_no + " P" + P_no;
            drop_down_text.style = "background-color:black";
            var link_id = "scroll_marking_area(QP1_" + Q_no + "_" + P_no + "_0_mark)";
            drop_down_text.setAttribute("onclick", "scroll_marking_area('QP1_" + Q_no + "_" + P_no + "_0_mark')");
            drop_down_text.id = "nav_Q" + Q_no + "_P" + P_no;


            // add it into the div for that question.
            nav_Q_Parts.appendChild(drop_down_text);

        }


        function nav_update_colors(Q_no) {
            //
            // updates colors for all nav entries or for a particular part/question.

            // set up vars
            var marking_form = JSON.parse(sessionStorage.getItem("markingForm"));
            var list_of_Qs = [];
            var p_status = "green";
            var q_status = "green";

            //test Q_no. if == 0 then update everything otherwise update specific Q/N pair.
            if (Q_no == 0) {
                // update the whole nav area colors.

                // first collect all the questions
                list_of_Qs = marking_form.filter(function(el) {
                    return el.PartNumber == 0
                });


            } else {
                // Q_no has a specific value. Use this;
                list_of_Qs.push(marking_form.find(x => ((x.QuestionNumber == Q_no) && (x.PartNumber == 0))));
            }

            //loop through the questions list and process.
            for (var i = 0; i < list_of_Qs.length; i++) {

                q_status = "green";

                // now get a list of parts for this question.
                list_of_Ps = marking_form.filter(function(el) {
                    return ((el.CommentNumber == 0) && (el.QuestionNumber == list_of_Qs[i].QuestionNumber))
                });

                // test each part has a mark. if no mark,
                // then set to red. if mark present, test for a comment or response
                for (var index1 = 1; index1 < list_of_Ps.length; index1++) {


                    // get the element, then its value
                    var p_mark_element = document.getElementById(
                        list_of_Ps[index1].id + "_mark");
                    var p_mark = p_mark_element.value;

                    //test the value. Empty? then set part status to red.
                    if (p_mark == "") {
                        p_status = "red";

                    } else {

                        // there is a mark. Now test if there is a comment or response.
                        // make a list of all comments and responses.
                        list_of_Cs = marking_form.filter(function(el) {
                            return ((el.PartNumber == list_of_Ps[index1].PartNumber) && (el.QuestionNumber == list_of_Qs[i].QuestionNumber))
                        });

                        // set a default value for the status of the part.
                        p_status = "orange";

                        // test each comment to find one that is set. if found, set part
                        // status to green. if none,
                        // then test the response.
                        for (var index2 = 1; index2 < list_of_Cs.length; index2++) {


                            // are we checking a comment or a response?
                            if (list_of_Cs[index2].CommentNumber == 99) {
                                // this is a response
                                if (document.getElementById(list_of_Cs[index2].id + "_response_textbox").value != "") {
                                    p_status = "green";
                                }

                            } else {
                                if (list_of_Cs[index2].CommentNumber < 99) {
                                    // this is a comment
                                    if (document.getElementById(list_of_Cs[index2].id + "_comment_check_box").checked) {
                                        p_status = "green";
                                    }

                                }
                            }

                        }

                    }

                    // set the colour for this part
                    document.getElementById("nav_Q" +
                        list_of_Ps[index1].QuestionNumber +
                        "_P" +
                        list_of_Ps[index1].PartNumber).style.color = p_status;

                    // adjust the question status based on results for this part.
                    if (p_status == "red") {
                        q_status = "red"
                    } else {
                        if (q_status == "green") {
                            q_status = p_status
                        }
                    }

                    // set the nav question colour
                    document.getElementById("nav_Q" +
                        list_of_Qs[i].QuestionNumber +
                        "_P0").style.color = q_status;

                }

            }
        }

        function scroll_marking_area(QP_destination) {
            // scrolls the marking area to the question and part provided.

            document.getElementById(QP_destination).scrollIntoView()

        }

    </script>





    <!--
including footer content which is common for all pages
-->
    <%- include layouts/footer.ejs %>
